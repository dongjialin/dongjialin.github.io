<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>折纸屋</title>
  
  
  <link href="http://blog.dongjialin.top/atom.xml" rel="self"/>
  
  <link href="http://blog.dongjialin.top/"/>
  <updated>2021-11-19T03:51:18.833Z</updated>
  <id>http://blog.dongjialin.top/</id>
  
  <author>
    <name>Paper</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang时间戳转换</title>
    <link href="http://blog.dongjialin.top/2021/11/19/gotime/"/>
    <id>http://blog.dongjialin.top/2021/11/19/gotime/</id>
    <published>2021-11-19T03:37:05.000Z</published>
    <updated>2021-11-19T03:51:18.833Z</updated>
    
    <content type="html"><![CDATA[<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">main</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span>(</span><br><span class="line">    &quot;<span class="selector-tag">fmt</span>&quot;</span><br><span class="line">    &quot;<span class="selector-tag">time</span>&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">main</span>() &#123;</span><br><span class="line">    <span class="attribute">datetime </span>:= <span class="string">&quot;2015-01-01 00:00:00&quot;</span>  //待转化为时间戳的字符串</span><br><span class="line"></span><br><span class="line">    //日期转化为时间戳</span><br><span class="line">    timeLayout := <span class="string">&quot;2006-01-02 15:04:05&quot;</span>  //转化所需模板  </span><br><span class="line">    loc, _ := time.<span class="built_in">LoadLocation</span>(<span class="string">&quot;Local&quot;</span>)    //获取时区  </span><br><span class="line">    tmp, _ := time.<span class="built_in">ParseInLocation</span>(timeLayout, datetime, loc) </span><br><span class="line">    timestamp := tmp.<span class="built_in">Unix</span>()    //转化为时间戳 类型是int64</span><br><span class="line">    fmt.<span class="built_in">Println</span>(timestamp) </span><br><span class="line"></span><br><span class="line">    //时间戳转化为日期  </span><br><span class="line">    datetime = time.<span class="built_in">Unix</span>(timestamp, <span class="number">0</span>).<span class="built_in">Format</span>(timeLayout)</span><br><span class="line">    fmt.<span class="built_in">Println</span>(datetime)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库查出转换"><a href="#数据库查出转换" class="headerlink" title="数据库查出转换"></a>数据库查出转换</h3><pre><code>//v.Birthday在数据库中存2021-11-10 查出显示2021-11-10T00:00:00+08:00//v.CreatedAt在数据库中存2021-11-10 23:32:31.072  查出显示2021-11-10T23:27:35.075+08:00for k, v := range res &#123;    res[k].Birthday = strings.Split(v.Birthday, &quot;T&quot;)[0]    t := v.CreatedAt    t.String()    res[k].Createtime = t.Format(&quot;2006-01-02 15:04:05&quot;)&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    
    <category term="Golang" scheme="http://blog.dongjialin.top/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>PHP高精度计算函数</title>
    <link href="http://blog.dongjialin.top/2021/04/10/phpcalculation/"/>
    <id>http://blog.dongjialin.top/2021/04/10/phpcalculation/</id>
    <published>2021-04-10T07:07:11.000Z</published>
    <updated>2021-04-10T07:09:05.340Z</updated>
    
    <content type="html"><![CDATA[<p>bcadd — 加法<br>bcsub — 减法<br>bcmul — 乘法<br>bcdiv — 相除<br>bccomp — 比较<br>bcmod — 求余数<br>bcpow — 次方<br>bcpowmod — 先次方然后求余数<br>bcscale — 给所有函数设置小数位精度<br>bcsqrt — 求平方根</p>]]></content>
    
    
    <summary type="html">小技巧</summary>
    
    
    
    
    <category term="PHP" scheme="http://blog.dongjialin.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>in_array优化</title>
    <link href="http://blog.dongjialin.top/2021/03/17/in-array/"/>
    <id>http://blog.dongjialin.top/2021/03/17/in-array/</id>
    <published>2021-03-17T07:11:16.000Z</published>
    <updated>2021-03-17T07:31:35.029Z</updated>
    
    <content type="html"><![CDATA[<p>in_array这个函数，在数据量大的情况下，效率会变的特别低<br>例如比较字符型数字的时候，两个字符型数字串先转换为长整型再进行比较，虽然加上第三参数true，转变成严格比较，会快一些，但还远远达不到优化的目的。</p><p>举例如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>计算时间</span><br><span class="line"><span class="keyword">function</span> microtime()</span><br><span class="line">&#123;</span><br><span class="line">    list(<span class="variable">$usec</span>, <span class="variable">$sec</span>) = explode(<span class="string">&#x27; &#x27;</span>, microtime());</span><br><span class="line">    return ((float)<span class="variable">$usec</span> + (float)<span class="variable">$sec</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>初始化数组(int和str类型)</span><br><span class="line"><span class="variable">$int_arr</span> = [];</span><br><span class="line"><span class="variable">$str_arr</span> = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">30000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$int_arr</span>[] = <span class="variable">$i</span>;</span><br><span class="line">    <span class="variable">$str_arr</span>[] = <span class="string">&quot;&#123;$i&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$int_arr1</span> = array_flip(<span class="variable">$int_arr</span>);</span><br><span class="line"><span class="variable">$str_arr1</span> = array_flip(<span class="variable">$str_arr</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>执行</span><br><span class="line"><span class="variable">$starttime</span> = microtime();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">50000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (in_array(<span class="number">1000</span>, <span class="variable">$int_arr</span>)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="regexp">//</span>  <span class="keyword">if</span> (isset(<span class="variable">$int_arr1</span>[<span class="number">18000</span>])) &#123;</span><br><span class="line"><span class="regexp">//</span>      <span class="keyword">continue</span>;</span><br><span class="line"><span class="regexp">//</span>  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$endtime</span> = microtime();</span><br><span class="line">echo <span class="string">&#x27;耗时：&#x27;</span> . (<span class="variable">$endtime</span> - <span class="variable">$starttime</span>);</span><br></pre></td></tr></table></figure><p>所以，我们在数据多的时候，利用array_flip()函数，调换数组的key和value,然后用isset()函数去搜索。速度会得到大幅度的提升。    </p>]]></content>
    
    
    <summary type="html">每天一个小技巧</summary>
    
    
    
    
    <category term="PHP" scheme="http://blog.dongjialin.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>github访问小技巧</title>
    <link href="http://blog.dongjialin.top/2021/03/11/github/"/>
    <id>http://blog.dongjialin.top/2021/03/11/github/</id>
    <published>2021-03-11T02:49:25.000Z</published>
    <updated>2021-03-11T03:02:43.612Z</updated>
    
    <content type="html"><![CDATA[<p>访问以下地址，<br><a href="https://ipaddress.com/">https://ipaddress.com</a><br>或者<br><a href="http://ip.tool.chinaz.com/github.com">http://ip.tool.chinaz.com/github.com</a><br>获取到下面几个域名的ip，放到hosts里<br>github.com<br>assets-cdn.github.com<br>github.global.ssl.fastly.net<br>完成🎉</p>]]></content>
    
    
    <summary type="html">github访问不了，怎么办</summary>
    
    
    
    
    <category term="碎碎念" scheme="http://blog.dongjialin.top/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>浏览器输入url并按下回车后，发生了什么</title>
    <link href="http://blog.dongjialin.top/2020/11/26/http/"/>
    <id>http://blog.dongjialin.top/2020/11/26/http/</id>
    <published>2020-11-26T12:18:31.000Z</published>
    <updated>2020-11-26T12:55:11.392Z</updated>
    
    <content type="html"><![CDATA[<h4 id="解析url"><a href="#解析url" class="headerlink" title="解析url"></a>解析url</h4><p>浏览器通过地址栏捕获到url地址之后，首先对url地址进行解析。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">比如 “http:<span class="comment">//www.baidu.com/index.html?name=lin&amp;age=22#top”，</span></span><br><span class="line">在这个例子中我们可以分成六部分:</span><br><span class="line"><span class="number">1</span>、传输协议：http，https</span><br><span class="line"><span class="number">2</span>、域名： 例www.baidu.com为网站名字。 baidu.com为一级域名，www是服务器</span><br><span class="line"><span class="number">3</span>、端口： 不填写的话默认走的是<span class="number">80</span>端口号</span><br><span class="line"><span class="number">4</span>、路径 http:<span class="comment">//www.baidu.com/路径1/路径1.2。/表示根目录</span></span><br><span class="line"><span class="number">5</span>、携带的参数：？name=mo</span><br><span class="line"><span class="number">6</span>、锚点值：#top</span><br></pre></td></tr></table></figure><p>一个完整的url，包含上述几部分，协议部分一般都是 http或者https。域名部分可以是 一段域名例如：baidu.com 也可以是ip地址，域名最后也会被解析为ip地址。</p><p>该ip地址的作用就是在互联网中确定服务器的位置，紧接着是端口后，端口号确定的是在服务器中运行的具体的程序。路径部分表示的是在该程序中资源的具体标识，查询参数作用主要是为了发送数据。</p><h4 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h4><p>一般域名都需要购买，因为ip地址不方便记忆，域名比较好记。域名都会和ip地址绑定，那么，在这里就需要做DNS解析，所谓DNS解析其实就是，根据域名找到其绑定的 ip地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器缓存→系统缓存→路由器缓存→ISP DNS缓存→根域名服务器</span><br></pre></td></tr></table></figure><p>DNS的查找过程解析：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、浏览器会先检查是否存在缓存，因为如果访问过一次该域名的话，会把结果缓存在浏览器中。</span><br><span class="line"><span class="number">2</span>、操作系统也会有自己的DNS缓存，但在这之前，会检查域名是否存在于本地的Hosts文件中。</span><br><span class="line"><span class="number">3</span>、路由器中也会有自己的缓存。</span><br><span class="line"><span class="number">4</span>、IPS DNS缓存 就是在客户端电脑上设置的首选DNS服务器。</span><br><span class="line"><span class="number">5</span>、在前边所有的情况下都没有找到缓存的情况下，会连接互联网，把请求转发到互联网的根域。</span><br></pre></td></tr></table></figure><h4 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h4><p>确定好目标服务器的ip地址和端口号后，就开始和远程服务器建立TCP链接。过程如下：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">发送方：发送消息，等待...</span><br><span class="line">接收方：接收消息，并给发送方回信，此时发送方接收到消息后，从发送方的角度就可明白自己的消息是可以发过去的。但是接收方还不能确定自己的消息是否可以正常发送。</span><br><span class="line">发送方：接收到发送方的回信后，在给接收方发一个消息，此时从接收方的角度就能明白自己的消息可以可以正常发送。</span><br></pre></td></tr></table></figure><h4 id="发送http请求"><a href="#发送http请求" class="headerlink" title="发送http请求"></a>发送http请求</h4><p>http协议是建立在tcp/ip协议之上的，tcp保证连接通畅，http就可以正常的进行请求和响应了。首先http请求是一个无状态的请求，且只能由浏览器主动发起，服务器进行响应。</p><p>浏览器发送请求的报文会携带以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请求路径</span><br><span class="line">查询参数</span><br><span class="line">请求方法</span><br><span class="line">请求头</span><br><span class="line">请求体</span><br></pre></td></tr></table></figure><h4 id="服务器接收请求"><a href="#服务器接收请求" class="headerlink" title="服务器接收请求"></a>服务器接收请求</h4><p>在服务端会监听浏览器端发送的http请求，当浏览器的请求发出后，服务端就会接受该请求，并解析出相应的信息，选择对应的逻辑进行处理（比如：查找对应的静态页面，保存文件，操作数据库，转发….）,并将处理的结果响应给浏览器端。</p><h4 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h4><p>服务器执行完逻辑之后，需要给浏览器响应内容（无论是要从服务器获取数据，还是在服务器做了什么操作，都需要给浏览器一个响应）</p><p>响应一般包含以下几部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">状态码</span><br><span class="line">状态文本</span><br><span class="line">响应头</span><br><span class="line">响应体</span><br></pre></td></tr></table></figure><p>服务器响应的同时肯定会伴随着浏览器端接收，等浏览器端彻底接收完毕之后，TCP就要进行4次挥手，并断开连接了。</p><h4 id="TCP链接断开"><a href="#TCP链接断开" class="headerlink" title="TCP链接断开"></a>TCP链接断开</h4><p>TCP链接的断开需要经过”四次挥手”，那么就需要一方主动的释放另外一方被动的释放。大体的过程如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、浏览器端发消息通知服务器现在需要断开（第一次挥手）</span><br><span class="line"><span class="number">2</span>、服务器接到要断开的请求之后，给浏览器返回消息，告诉浏览器我正在准备释放（第二次挥手）</span><br><span class="line"><span class="number">3</span>、此时浏览器接到消息后正在等待服务器释放完成，而服务器正在准备释放的过程</span><br><span class="line"><span class="number">4</span>、当服务器释放完成后，再通知浏览器我已经释放完成了。（第三次挥手）</span><br><span class="line"><span class="number">5</span>、浏览器接收到服务器释放完成的消息后，再给服务器发送消息告诉服务器我已经知道你释放完成了，服务器收到消息后，就能确认自己释放完成的消息已经通知到了（第四次挥手）</span><br></pre></td></tr></table></figure><h4 id="浏览器解析资源"><a href="#浏览器解析资源" class="headerlink" title="浏览器解析资源"></a>浏览器解析资源</h4><p>当浏览器接收到服务器响应的资源后，会对资源进行解析。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、首先，查看Response Header,根据响应头的指示做不同的事情，比如重定向，存储cookie，解压gzip，缓存资源等等。</span><br><span class="line"><span class="number">2</span>、接下来获取MIME类型（查看响应头的 Content-Type的值），根据不同的资源类型采用不同的解析方式</span><br></pre></td></tr></table></figure><h4 id="渲染页面"><a href="#渲染页面" class="headerlink" title="渲染页面"></a>渲染页面</h4><p>一般来说从地址栏输入地址后，绝大多是情况下响应的都是 html文件，那么就说以说页面是如何渲染html页面的，html页面中一般也会嵌入css，js，图片等资源。</p><p>因此如果解析到这些资源的时候，会再次向目标服务器发起请求，那么又会经历从解析url地址开始的各个步骤。</p><h4 id="html页面的加载"><a href="#html页面的加载" class="headerlink" title="html页面的加载"></a>html页面的加载</h4><p>首先要知道浏览器解析是从上往下一行一行地解析的。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、解码：传输回来的其实都是一些二进制字节数据，浏览器需要根据文件指定编码（例如UTF<span class="number">-8</span>）转换成字符串，也就是HTML 代码</span><br><span class="line"><span class="number">2</span>、预解析：预解析做的事情是提前加载资源，减少处理时间，它会识别一些会请求资源的属性，比如img标签的src属性，并将这个请求加到请求队列中。</span><br><span class="line"><span class="number">3</span>、符号化：符号化是词法分析的过程，将输入解析成符号，HTML 符号包括，开始标签、结束标签、属性名和属性值。它通过一个状态机去识别符号的状态，比如遇到&lt;，&gt;状态都会产生变化。</span><br><span class="line"><span class="number">4</span>、构建树：在上一步符号化中，解析器获得这些标记，然后以合适的方法创建DOM对象并把这些符号插入到DOM对象中。</span><br></pre></td></tr></table></figure><h4 id="CSS解析"><a href="#CSS解析" class="headerlink" title="CSS解析"></a>CSS解析</h4><p>一旦浏览器下载了 CSS，CSS 解析器就会处理它遇到的任何 CSS，根据语法规范解析出所有的 CSS 并进行标记化，然后我们得到一个规则表。</p><p>在匹配一个节点对应的 CSS 规则时，是按照从右到左的顺序的，例如：div p { font-size :14px }会先寻找所有的p标签然后判断它的父元素是否为div。</p><h4 id="javaScript编译执行"><a href="#javaScript编译执行" class="headerlink" title="javaScript编译执行"></a>javaScript编译执行</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、词法分析：<span class="keyword">js</span>脚本加载完毕后，会首先进入语法分析阶段，它首先会分析代码块的语法是否正确，不正确则抛出“语法错误”，停止执行。</span><br><span class="line"><span class="number">2</span>、预编译：<span class="keyword">js</span>有三种运行环境分别是 全局环境，函数环境，eval。每进入一个不同的运行环境都会创建一个对应的执行上下文，根据不同的上下文环境，形成一个函数调用栈，栈底永远是全局执行上下文，栈顶则永远是当前执行上下文。</span><br><span class="line"><span class="number">3</span>、执行：<span class="keyword">js</span>虽然是单线程的，但是实际参与工作的线程一共有四个：<span class="keyword">JS</span>引擎线程（主），事件触发线程，定时器触发线程，HTTP异步请求线程</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>浏览地地址栏输入地址按下回车，必然会经历以下几个步骤：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、解析url地址</span><br><span class="line"><span class="number">2</span>、DNS解析</span><br><span class="line"><span class="number">3</span>、TCP链接</span><br><span class="line"><span class="number">4</span>、发送http请求</span><br><span class="line"><span class="number">5</span>、服务器接收请求</span><br><span class="line"><span class="number">6</span>、服务器响应</span><br><span class="line"><span class="number">7</span>、TCP链接断开</span><br><span class="line"><span class="number">8</span>、浏览器解析资源</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这个问题是一个非常普遍且经典的问题，一个合格程序员必须要搞懂的问题！</summary>
    
    
    
    
    <category term="技术" scheme="http://blog.dongjialin.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>leetcode刷题</title>
    <link href="http://blog.dongjialin.top/2020/11/10/leetcode/"/>
    <id>http://blog.dongjialin.top/2020/11/10/leetcode/</id>
    <published>2020-11-10T06:04:08.000Z</published>
    <updated>2020-11-10T06:30:04.239Z</updated>
    
    <content type="html"><![CDATA[<p>最近这几天一直在leetcode刷题，正好顺便把学习的golang联系一下。<br>刷题从先从简单的开始，慢慢开通自己许久没动的脑子，有点固化的思维。<br>许多面试题的算法题，这上边也有，为以后的面试好好做准备。</p>]]></content>
    
    
    <summary type="html">刷题，刷题，刷题</summary>
    
    
    
    
    <category term="碎碎念" scheme="http://blog.dongjialin.top/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>golang小笔记</title>
    <link href="http://blog.dongjialin.top/2020/11/07/go1/"/>
    <id>http://blog.dongjialin.top/2020/11/07/go1/</id>
    <published>2020-11-07T07:27:12.000Z</published>
    <updated>2020-11-09T02:14:02.296Z</updated>
    
    <content type="html"><![CDATA[<h3 id="运行用时"><a href="#运行用时" class="headerlink" title="运行用时"></a>运行用时</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">start</span> := <span class="built_in">time</span>.Now()</span><br><span class="line"><span class="built_in">secs</span> := <span class="built_in">time</span>.Since(<span class="built_in">start</span>).Seconds()</span><br></pre></td></tr></table></figure><h3 id="将字符串-“hello”-转换为-“cello”"><a href="#将字符串-“hello”-转换为-“cello”" class="headerlink" title="将字符串 “hello” 转换为 “cello”"></a>将字符串 “hello” 转换为 “cello”</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">&quot;hello&quot;</span></span><br><span class="line">c := []<span class="keyword">byte</span>(s)</span><br><span class="line">c[<span class="number">0</span>] = <span class="string">&#x27;c&#x27;</span></span><br><span class="line">s2 := <span class="keyword">string</span>(c) <span class="comment">// s2 == &quot;cello&quot;</span></span><br></pre></td></tr></table></figure><h3 id="切片（php中类似索引数组）"><a href="#切片（php中类似索引数组）" class="headerlink" title="切片（php中类似索引数组）"></a>切片（php中类似索引数组）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">当相关数组还没有定义时，我们可以使用 <span class="built_in">make</span>() 函数来创建一个切片 同时创建好相关数组：<span class="keyword">var</span> slice1 []<span class="keyword">type</span> = <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)。</span><br><span class="line">也可以简写为 slice1 := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)，这里 <span class="built_in">len</span> 是数组的长度并且也是 slice 的初始长度。</span><br><span class="line">所以定义 s2 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)，那么 <span class="built_in">cap</span>(s2) == <span class="built_in">len</span>(s2) == <span class="number">10</span>。</span><br><span class="line"></span><br><span class="line"><span class="built_in">make</span> 接受 <span class="number">2</span> 个参数：元素的类型以及切片的元素个数。</span><br><span class="line">如果你想创建一个 slice1，它不占用整个数组，而只是占用以 <span class="built_in">len</span> 为个数个项，那么只要：slice1 := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>, <span class="built_in">cap</span>)。</span><br><span class="line"><span class="built_in">make</span> 的使用方式是：<span class="function"><span class="keyword">func</span> <span class="title">make</span><span class="params">([]T, <span class="built_in">len</span>, <span class="built_in">cap</span>)</span>，其中 <span class="title">cap</span> 是可选参数。</span></span><br><span class="line"></span><br><span class="line">所以下面两种方法可以生成相同的切片:</span><br><span class="line"><span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">50</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">new</span>([<span class="number">100</span>]<span class="keyword">int</span>)[<span class="number">0</span>:<span class="number">50</span>]</span><br></pre></td></tr></table></figure><h3 id="map（php中类似关联数组）"><a href="#map（php中类似关联数组）" class="headerlink" title="map（php中类似关联数组）"></a>map（php中类似关联数组）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span> 是 引用类型 的： 内存用 <span class="built_in">make</span> 方法来分配。</span><br><span class="line"><span class="keyword">map</span> 的初始化：<span class="keyword">var</span> map1 = <span class="built_in">make</span>(<span class="keyword">map</span>[keytype]valuetype)。</span><br><span class="line">或者简写为：map1 := <span class="built_in">make</span>(<span class="keyword">map</span>[keytype]valuetype)。</span><br><span class="line"></span><br><span class="line">上面例子中的 mapCreated 就是用这种方式创建的：mapCreated := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">float32</span>)。</span><br><span class="line">相当于：mapCreated := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">float32</span>&#123;&#125;。</span><br><span class="line">mapAssigned 也是 mapList 的引用，对 mapAssigned 的修改也会影响到 mapLit 的值。</span><br><span class="line"></span><br><span class="line">不要使用 <span class="built_in">new</span>，永远用 <span class="built_in">make</span> 来构造 <span class="keyword">map</span></span><br><span class="line"></span><br><span class="line">map1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">map1[<span class="string">&quot;New Delhi&quot;</span>] = <span class="number">55</span></span><br><span class="line">map1[<span class="string">&quot;Beijing&quot;</span>] = <span class="number">20</span></span><br><span class="line">map1[<span class="string">&quot;Washington&quot;</span>] = <span class="number">25</span></span><br></pre></td></tr></table></figure><h3 id="转json"><a href="#转json" class="headerlink" title="转json"></a>转json</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">json</span>, _ := <span class="type">json</span>.Marshal(<span class="keyword">array</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">最近在学习Golang，在此记录一下</summary>
    
    
    
    
    <category term="Golang" scheme="http://blog.dongjialin.top/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>你好，朋友</title>
    <link href="http://blog.dongjialin.top/2020/11/06/hello-world/"/>
    <id>http://blog.dongjialin.top/2020/11/06/hello-world/</id>
    <published>2020-11-06T07:27:12.000Z</published>
    <updated>2020-11-10T06:30:35.526Z</updated>
    
    <content type="html"><![CDATA[<p>这个小站就一下午的时间搭起来的，为了上杰克叔的小圈子，哈哈～</p>]]></content>
    
    
    <summary type="html">欢迎来到我的小站，我会在这里更新一些我的碎碎念，欢迎大家。</summary>
    
    
    
    
    <category term="碎碎念" scheme="http://blog.dongjialin.top/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
</feed>
